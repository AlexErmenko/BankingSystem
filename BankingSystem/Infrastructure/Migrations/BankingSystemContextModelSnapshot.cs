// <auto-generated />
using System;

using ApplicationCore.BankingSystemContext;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Infrastructure.Migrations
{
	[DbContext(contextType: typeof(BankingSystemContext))]
	internal class BankingSystemContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder.HasAnnotation(annotation: "ProductVersion", value: "3.1.2")
						.HasAnnotation(annotation: "Relational:MaxIdentifierLength", value: 128)
						.HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity(name: "ApplicationCore.Entity.Accrual", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").HasColumnType(typeName: "int");

				b.Property<string>(propertyName: "Amount").IsRequired().HasColumnType(typeName: "nchar(10)").IsFixedLength().HasMaxLength(maxLength: 10);

				b.Property<DateTime>(propertyName: "DateAccrual").HasColumnType(typeName: "date");

				b.Property<int>(propertyName: "IdDeposit").HasColumnType(typeName: "int");

				b.HasKey("Id");

				b.HasIndex("IdDeposit");

				b.ToTable(name: "Accrual");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.BankAccount", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>(propertyName: "AccountType").HasColumnType(typeName: "varchar(20)").HasMaxLength(maxLength: 20).IsUnicode(unicode: false);

				b.Property<decimal>(propertyName: "Amount").HasColumnType(typeName: "decimal(10, 2)");

				b.Property<DateTime?>(propertyName: "DateClose").HasColumnType(typeName: "date");

				b.Property<DateTime>(propertyName: "DateOpen").HasColumnType(typeName: "date");

				b.Property<int>(propertyName: "IdClient").HasColumnType(typeName: "int");

				b.Property<int>(propertyName: "IdCurrency").HasColumnType(typeName: "int");

				b.HasKey("Id");

				b.HasIndex("IdClient");

				b.HasIndex("IdCurrency");

				b.ToTable(name: "BankAccount");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Client", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>(propertyName: "Address").IsRequired().HasColumnType(typeName: "varchar(120)").HasMaxLength(maxLength: 120).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "Login").IsRequired().HasColumnType(typeName: "varchar(100)").HasMaxLength(maxLength: 100).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "TelNumber").IsRequired().HasColumnName(name: "Tel_number").HasColumnType(typeName: "varchar(15)").HasMaxLength(maxLength: 15).IsUnicode(unicode: false);

				b.HasKey("Id");

				b.ToTable(name: "Client");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Credit", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<decimal>(propertyName: "Amount").HasColumnType(typeName: "decimal(10, 2)");

				b.Property<DateTime>(propertyName: "DateCredit").HasColumnType(typeName: "date");

				b.Property<DateTime>(propertyName: "DateCreditFinish").HasColumnType(typeName: "date");

				b.Property<int>(propertyName: "IdAccount").HasColumnType(typeName: "int");

				b.Property<decimal>(propertyName: "PercentCredit").HasColumnType(typeName: "decimal(10, 2)");

				b.Property<bool>(propertyName: "Status").HasColumnType(typeName: "bit");

				b.HasKey("Id");

				b.HasIndex("IdAccount");

				b.ToTable(name: "Credit");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Currency", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>(propertyName: "Name").IsRequired().HasColumnType(typeName: "varchar(30)").HasMaxLength(maxLength: 30).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "ShortName").IsRequired().HasColumnType(typeName: "varchar(10)").HasMaxLength(maxLength: 10).IsUnicode(unicode: false);

				b.HasKey("Id");

				b.ToTable(name: "Currency");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Deposit", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<decimal>(propertyName: "Amount").HasColumnType(typeName: "decimal(10, 2)");

				b.Property<DateTime>(propertyName: "DateDeposit").HasColumnType(typeName: "date");

				b.Property<int>(propertyName: "IdAccount").HasColumnType(typeName: "int");

				b.Property<decimal>(propertyName: "PercentDeposit").HasColumnType(typeName: "decimal(6, 2)");

				b.Property<bool>(propertyName: "Status").HasColumnType(typeName: "bit");

				b.HasKey("Id");

				b.HasIndex("IdAccount");

				b.ToTable(name: "Deposit");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.ExchangeRate", buildAction: b =>
			{
				b.Property<DateTime>(propertyName: "DateRate").HasColumnType(typeName: "date");

				b.Property<int>(propertyName: "IdCurrency").HasColumnType(typeName: "int");

				b.Property<decimal>(propertyName: "RateBuy").HasColumnType(typeName: "decimal(10, 5)");

				b.Property<decimal>(propertyName: "RateSale").HasColumnType(typeName: "decimal(10, 5)");

				b.HasKey("DateRate", "IdCurrency").HasName(name: "PK__exchange__180651E1A5EECBD7");

				b.HasIndex("IdCurrency");

				b.ToTable(name: "ExchangeRate");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.LegalPerson", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").HasColumnType(typeName: "int");

				b.Property<string>(propertyName: "Director").IsRequired().HasColumnType(typeName: "varchar(50)").HasMaxLength(maxLength: 50).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "Name").IsRequired().HasColumnType(typeName: "varchar(100)").HasMaxLength(maxLength: 100).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "OwnershipType").IsRequired().HasColumnType(typeName: "varchar(20)").HasMaxLength(maxLength: 20).IsUnicode(unicode: false);

				b.HasKey("Id");

				b.ToTable(name: "LegalPerson");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Operation", buildAction: b =>
			{
				b.Property<DateTime>(propertyName: "OperationTime").HasColumnType(typeName: "datetime");

				b.Property<int>(propertyName: "IdAccount").HasColumnType(typeName: "int");

				b.Property<decimal>(propertyName: "Amount").HasColumnType(typeName: "decimal(10, 2)");

				b.Property<string>(propertyName: "TypeOperation").IsRequired().HasColumnType(typeName: "varchar(30)").HasMaxLength(maxLength: 30).IsUnicode(unicode: false);

				b.HasKey("OperationTime", "IdAccount").HasName(name: "PK_operation");

				b.ToTable(name: "Operation");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.PhysicalPerson", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").HasColumnType(typeName: "int");

				b.Property<string>(propertyName: "IdentificationNumber").IsRequired().HasColumnType(typeName: "varchar(10)").HasMaxLength(maxLength: 10).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "Name").IsRequired().HasColumnType(typeName: "varchar(40)").HasMaxLength(maxLength: 40).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "PassportNumber").IsRequired().HasColumnType(typeName: "varchar(10)").HasMaxLength(maxLength: 10).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "PassportSeries").IsRequired().HasColumnType(typeName: "varchar(2)").HasMaxLength(maxLength: 2).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "Patronymic").IsRequired().HasColumnType(typeName: "varchar(80)").HasMaxLength(maxLength: 80).IsUnicode(unicode: false);

				b.Property<string>(propertyName: "Surname").IsRequired().HasColumnType(typeName: "varchar(50)").HasMaxLength(maxLength: 50).IsUnicode(unicode: false);

				b.HasKey("Id");

				b.ToTable(name: "PhysicalPerson");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Repayment", buildAction: b =>
			{
				b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<decimal>(propertyName: "Amount").HasColumnType(typeName: "decimal(10, 2)");

				b.Property<DateTime>(propertyName: "DateRepayment").HasColumnType(typeName: "date");

				b.Property<int>(propertyName: "IdCredit").HasColumnType(typeName: "int");

				b.HasKey("Id");

				b.HasIndex("IdCredit");

				b.ToTable(name: "Repayment");
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Accrual", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.Deposit", navigationName: "IdDepositNavigation")
				 .WithMany(collection: "Accruals")
				 .HasForeignKey("IdDeposit")
				 .HasConstraintName(name: "FK_accrual_deposit")
				 .OnDelete(deleteBehavior: DeleteBehavior.Cascade)
				 .IsRequired();
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.BankAccount", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.Client", navigationName: "IdClientNavigation").WithMany(collection: "BankAccounts").HasForeignKey("IdClient").HasConstraintName(name: "FK__bank_acco__id_cl__412EB0B6").IsRequired();

				b.HasOne(relatedTypeName: "ApplicationCore.Entity.Currency", navigationName: "IdCurrencyNavigation").WithMany(collection: "BankAccounts").HasForeignKey("IdCurrency").HasConstraintName(name: "FK__bank_acco__id_cu__4316F928").IsRequired();
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Credit", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.BankAccount", navigationName: "IdAccountNavigation")
				 .WithMany(collection: "Credits")
				 .HasForeignKey("IdAccount")
				 .HasConstraintName(name: "FK_credit_bank_account")
				 .OnDelete(deleteBehavior: DeleteBehavior.Cascade)
				 .IsRequired();
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Deposit", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.BankAccount", navigationName: "IdAccountNavigation")
				 .WithMany(collection: "Deposits")
				 .HasForeignKey("IdAccount")
				 .HasConstraintName(name: "FK_deposit_bank_account")
				 .OnDelete(deleteBehavior: DeleteBehavior.Cascade)
				 .IsRequired();
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.ExchangeRate", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.Currency", navigationName: "IdCurrencyNavigation").WithMany(collection: "ExchangeRates").HasForeignKey("IdCurrency").HasConstraintName(name: "FK__exchange___id_cu__45F365D3").IsRequired();
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.LegalPerson", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.Client", navigationName: "IdNavigation")
				 .WithOne(reference: "LegalPerson")
				 .HasForeignKey(dependentEntityTypeName: "ApplicationCore.Entity.LegalPerson", "Id")
				 .HasConstraintName(name: "FK_LegalPerson_Client")
				 .OnDelete(deleteBehavior: DeleteBehavior.Cascade)
				 .IsRequired();
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.PhysicalPerson", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.Client", navigationName: "IdNavigation")
				 .WithOne(reference: "PhysicalPerson")
				 .HasForeignKey(dependentEntityTypeName: "ApplicationCore.Entity.PhysicalPerson", "Id")
				 .HasConstraintName(name: "FK_physical_person_client")
				 .OnDelete(deleteBehavior: DeleteBehavior.Cascade)
				 .IsRequired();
			});

			modelBuilder.Entity(name: "ApplicationCore.Entity.Repayment", buildAction: b =>
			{
				b.HasOne(relatedTypeName: "ApplicationCore.Entity.Credit", navigationName: "IdCreditNavigation").WithMany(collection: "Repayments").HasForeignKey("IdCredit").HasConstraintName(name: "FK_repayment_credit").IsRequired();
			});
#pragma warning restore 612, 618
		}
	}
}
