// <auto-generated />
using System;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Infrastructure.Identity.Migrations
{
  [DbContext(contextType: typeof(ApplicationDbContext))]
  internal class ApplicationDbContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder.HasAnnotation(annotation: "ProductVersion", value: "3.1.2")
          .HasAnnotation(annotation: "Relational:MaxIdentifierLength", value: 128)
          .HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

      modelBuilder.Entity(name: "Infrastructure.Identity.ApplicationUser", buildAction: b =>
      {
        b.Property<string>(propertyName: "Id").HasColumnType(typeName: "nvarchar(450)");

        b.Property<int>(propertyName: "AccessFailedCount").HasColumnType(typeName: "int");

        b.Property<string>(propertyName: "ConcurrencyStamp").IsConcurrencyToken().HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "Email").HasColumnType(typeName: "nvarchar(256)").HasMaxLength(maxLength: 256);

        b.Property<bool>(propertyName: "EmailConfirmed").HasColumnType(typeName: "bit");

        b.Property<bool>(propertyName: "LockoutEnabled").HasColumnType(typeName: "bit");

        b.Property<DateTimeOffset?>(propertyName: "LockoutEnd").HasColumnType(typeName: "datetimeoffset");

        b.Property<string>(propertyName: "NormalizedEmail").HasColumnType(typeName: "nvarchar(256)").HasMaxLength(maxLength: 256);

        b.Property<string>(propertyName: "NormalizedUserName").HasColumnType(typeName: "nvarchar(256)").HasMaxLength(maxLength: 256);

        b.Property<string>(propertyName: "PasswordHash").HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "PhoneNumber").HasColumnType(typeName: "nvarchar(max)");

        b.Property<bool>(propertyName: "PhoneNumberConfirmed").HasColumnType(typeName: "bit");

        b.Property<string>(propertyName: "SecurityStamp").HasColumnType(typeName: "nvarchar(max)");

        b.Property<bool>(propertyName: "TwoFactorEnabled").HasColumnType(typeName: "bit");

        b.Property<string>(propertyName: "UserName").IsRequired().HasColumnType(typeName: "nvarchar(256)").HasMaxLength(maxLength: 256);

        b.HasKey("Id");

        b.HasIndex("NormalizedEmail").HasName(name: "EmailIndex");

        b.HasIndex("NormalizedUserName").IsUnique().HasName(name: "UserNameIndex").HasFilter(sql: "[NormalizedUserName] IS NOT NULL");

        b.ToTable(name: "AspNetUsers");
      });

      modelBuilder.Entity(name: "Infrastructure.Identity.FileModel", buildAction: b =>
      {
        b.Property<string>(propertyName: "Id").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "Name").HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "Path").HasColumnType(typeName: "nvarchar(max)");

        b.HasKey("Id");

        b.ToTable(name: "FileModel");
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityRole", buildAction: b =>
      {
        b.Property<string>(propertyName: "Id").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "ConcurrencyStamp").IsConcurrencyToken().HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "Name").HasColumnType(typeName: "nvarchar(256)").HasMaxLength(maxLength: 256);

        b.Property<string>(propertyName: "NormalizedName").HasColumnType(typeName: "nvarchar(256)").HasMaxLength(maxLength: 256);

        b.HasKey("Id");

        b.HasIndex("NormalizedName").IsUnique().HasName(name: "RoleNameIndex").HasFilter(sql: "[NormalizedName] IS NOT NULL");

        b.ToTable(name: "AspNetRoles");
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", buildAction: b =>
      {
        b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

        b.Property<string>(propertyName: "ClaimType").HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "ClaimValue").HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "RoleId").IsRequired().HasColumnType(typeName: "nvarchar(450)");

        b.HasKey("Id");

        b.HasIndex("RoleId");

        b.ToTable(name: "AspNetRoleClaims");
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", buildAction: b =>
      {
        b.Property<int>(propertyName: "Id").ValueGeneratedOnAdd().HasColumnType(typeName: "int").HasAnnotation(annotation: "SqlServer:ValueGenerationStrategy", value: SqlServerValueGenerationStrategy.IdentityColumn);

        b.Property<string>(propertyName: "ClaimType").HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "ClaimValue").HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "UserId").IsRequired().HasColumnType(typeName: "nvarchar(450)");

        b.HasKey("Id");

        b.HasIndex("UserId");

        b.ToTable(name: "AspNetUserClaims");
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", buildAction: b =>
      {
        b.Property<string>(propertyName: "LoginProvider").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "ProviderKey").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "ProviderDisplayName").HasColumnType(typeName: "nvarchar(max)");

        b.Property<string>(propertyName: "UserId").IsRequired().HasColumnType(typeName: "nvarchar(450)");

        b.HasKey("LoginProvider", "ProviderKey");

        b.HasIndex("UserId");

        b.ToTable(name: "AspNetUserLogins");
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserRole<string>", buildAction: b =>
      {
        b.Property<string>(propertyName: "UserId").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "RoleId").HasColumnType(typeName: "nvarchar(450)");

        b.HasKey("UserId", "RoleId");

        b.HasIndex("RoleId");

        b.ToTable(name: "AspNetUserRoles");
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserToken<string>", buildAction: b =>
      {
        b.Property<string>(propertyName: "UserId").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "LoginProvider").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "Name").HasColumnType(typeName: "nvarchar(450)");

        b.Property<string>(propertyName: "Value").HasColumnType(typeName: "nvarchar(max)");

        b.HasKey("UserId", "LoginProvider", "Name");

        b.ToTable(name: "AspNetUserTokens");
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", buildAction: b =>
      {
        b.HasOne(relatedTypeName: "Microsoft.AspNetCore.Identity.IdentityRole", navigationName: null).WithMany().HasForeignKey("RoleId").OnDelete(deleteBehavior: DeleteBehavior.Cascade).IsRequired();
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", buildAction: b =>
      {
        b.HasOne(relatedTypeName: "Infrastructure.Identity.ApplicationUser", navigationName: null).WithMany().HasForeignKey("UserId").OnDelete(deleteBehavior: DeleteBehavior.Cascade).IsRequired();
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", buildAction: b =>
      {
        b.HasOne(relatedTypeName: "Infrastructure.Identity.ApplicationUser", navigationName: null).WithMany().HasForeignKey("UserId").OnDelete(deleteBehavior: DeleteBehavior.Cascade).IsRequired();
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserRole<string>", buildAction: b =>
      {
        b.HasOne(relatedTypeName: "Microsoft.AspNetCore.Identity.IdentityRole", navigationName: null).WithMany().HasForeignKey("RoleId").OnDelete(deleteBehavior: DeleteBehavior.Cascade).IsRequired();

        b.HasOne(relatedTypeName: "Infrastructure.Identity.ApplicationUser", navigationName: null).WithMany().HasForeignKey("UserId").OnDelete(deleteBehavior: DeleteBehavior.Cascade).IsRequired();
      });

      modelBuilder.Entity(name: "Microsoft.AspNetCore.Identity.IdentityUserToken<string>", buildAction: b =>
      {
        b.HasOne(relatedTypeName: "Infrastructure.Identity.ApplicationUser", navigationName: null).WithMany().HasForeignKey("UserId").OnDelete(deleteBehavior: DeleteBehavior.Cascade).IsRequired();
      });
#pragma warning restore 612, 618
    }
  }
}
